
// ContentView.swift

import SwiftUI

struct ContentView: View {
    // MARK: Internal

    struct ColorPickerSheet: View {
        @ObservedObject var viewModel: MeshGradientViewModel

        var body: some View {
            Form {
                if let (x, y) = viewModel.selectedPointForColorPicker {
                    ColorPicker("Change Color", selection: Binding(
                        get: { viewModel.getPointColor(x: x, y: y) },
                        set: { newColor in
                            viewModel.changePointColor(x: x, y: y, color: newColor)
                        }
                    ))
                    .listRowBackground(Color.white.opacity(0.2))
                }
            }
            .scrollContentBackground(.hidden)
            .presentationDetents([.height(75)])
            .presentationDragIndicator(.visible)
            .presentationBackground(.ultraThinMaterial)
        }
    }

    var body: some View {
        GeometryReader { geometry in
            ZStack {
                meshGradientView(in: geometry)
                pointsView(in: geometry)
                animateButton
                settingsButton
            }
        }
        .onAppear {
            viewModel.startColorAnimation()
        }
        .onChange(of: viewModel.isColorAnimationEnabled) { isEnabled in
            if isEnabled {
                viewModel.startColorAnimation()
            } else {
                viewModel.stopColorAnimation()
            }
        }
        .onAppear(perform: viewModel.initializeMesh)
        .onChange(of: viewModel.selectedPaletteIndex) { _ in viewModel.updateColors() }
        .onChange(of: viewModel.meshWidth) { _ in viewModel.updateMeshDimensions() }
        .onChange(of: viewModel.meshHeight) { _ in viewModel.updateMeshDimensions() }
        .sheet(isPresented: $viewModel.showSettings) {
            SettingsView(viewModel: viewModel)
                .presentationDetents([.medium])
                .presentationDragIndicator(.visible)
                .presentationBackground(.ultraThinMaterial)
        }
        .sheet(isPresented: $viewModel.showColorPicker) {
            ColorPickerSheet(viewModel: viewModel)
        }
    }

    // MARK: Private

    @StateObject private var viewModel = MeshGradientViewModel()

    private var animateButton: some View {
        Button(action: { viewModel.isColorAnimationEnabled.toggle() }) {
            Image(systemName: viewModel.isColorAnimationEnabled ? "pause.circle" : "play.circle")
                .resizable()
                .scaledToFit()
                .padding(6)
                .frame(width: 45, height: 45)
                .tint(.accentColor.opacity(0.5))
                .background(.ultraThinMaterial, in: RoundedRectangle(cornerRadius: 47))
                .shadow(radius: 2)
        }
        .padding(.leading, 20)
        .padding(.bottom, 20)
        .frame(maxWidth: .infinity, maxHeight: .infinity, alignment: .bottomLeading)
    }

    private var settingsButton: some View {
        Button(action: { viewModel.showSettings.toggle() }) {
            Image(systemName: "paintbrush")
                .resizable()
                .aspectRatio(contentMode: .fit)
                .padding(8)
                .frame(width: 45, height: 45)
                .tint(.accentColor.opacity(0.5))
                .background(.ultraThinMaterial, in: RoundedRectangle(cornerRadius: 47))
                .shadow(radius: 2)
        }
        .padding(.trailing, 20)
        .padding(.bottom, 20)
        .frame(maxWidth: .infinity, maxHeight: .infinity, alignment: .bottomTrailing)
    }

    private func meshGradientView(in geometry: GeometryProxy) -> some View {
        MeshGradient(
            width: viewModel.meshWidth,
            height: viewModel.meshHeight,
            points: viewModel.points.flatMap { $0 },
            colors: viewModel.currentColors
        )
        .shadow(
            color: viewModel.shadowEnabled ? viewModel.shadowColor : .clear,
            radius: viewModel.shadowRadius,
            x: viewModel.shadowOffset.width,
            y: viewModel.shadowOffset.height
        )
        .gesture(dragGesture(in: geometry))
    }

    private func pointsView(in geometry: GeometryProxy) -> some View {
        Group {
            if viewModel.showPoints {
                ForEach(0 ..< viewModel.meshHeight, id: \.self) { y in
                    ForEach(0 ..< viewModel.meshWidth, id: \.self) { x in
                        if let _ = viewModel.points[safe: y]?[safe: x] {
                            pointCircle(x: x, y: y, in: geometry)
                        }
                    }
                }
            }
        }
    }

    private func pointCircle(x: Int, y: Int, in geometry: GeometryProxy) -> some View {
        let pointColor = viewModel.getPointColor(x: x, y: y)
        let inverseColor = pointColor.inverse()

        return ZStack {
            Circle()
                .fill(pointColor)

            Circle()
                .stroke(inverseColor, lineWidth: 3)
        }
        .frame(width: viewModel.circleSize(for: x, y: y))
        .position(
            x: CGFloat(viewModel.points[safe: y]?[safe: x]?.x ?? 0) * geometry.size.width,
            y: CGFloat(viewModel.points[safe: y]?[safe: x]?.y ?? 0) * geometry.size.height
        )
        .gesture(
            TapGesture()
                .onEnded {
                    viewModel.selectPointForColorPicker(x: x, y: y)
                }
        )
        .simultaneousGesture(dragGesture(in: geometry))
    }

    private func dragGesture(in geometry: GeometryProxy) -> some Gesture {
        DragGesture(minimumDistance: 1)
            .onChanged { value in
                let touchPoint = SIMD2<Float>(
                    Float(value.location.x / geometry.size.width),
                    Float(value.location.y / geometry.size.height)
                )
                withAnimation(.smooth()) {
                    viewModel.movePoint(to: touchPoint)
                }
            }
            .onEnded { _ in
                viewModel.endPointMovement()
            }
    }
}

#Preview {
    ContentView()
}

//  MeshGradientViewModel.swift

import Combine
import SwiftUI

class MeshGradientViewModel: ObservableObject {
    // MARK: Internal

    @Published var meshWidth: Int = 3
    @Published var meshHeight: Int = 3
    @Published var points: [[SIMD2<Float>]] = []
    @Published var showPoints = true
    @Published var currentColors: [Color] = []
    @Published var selectedPaletteIndex = 0

    @Published var shadowEnabled = false
    @Published var shadowColor = Color.gray
    @Published var shadowRadius: CGFloat = 25
    @Published var shadowOffsetX: CGFloat = -10
    @Published var shadowOffsetY: CGFloat = 10
    @Published var shadowOffset = CGSize(width: -10, height: 10)

    @Published var showSettings = true
    @Published var selectedPointForMenu: (Int, Int)? = nil
    @Published var selectedColor: Color = .white
    @Published var showColorPicker = false
    @Published var selectedPointForColorPicker: (x: Int, y: Int)?

    @Published var isColorAnimationEnabled = false
    @Published var colorAnimationSpeed: Double = 1.0
    @Published var colorAnimationProgress: Double = 0.0

    @Published private(set) var movingPointIndex: (Int, Int)?

    func initializeMesh() {
        points = (0 ..< meshHeight).map { y in
            (0 ..< meshWidth).map { x in
                SIMD2<Float>(Float(x) / Float(max(1, meshWidth - 1)), Float(y) / Float(max(1, meshHeight - 1)))
            }
        }
        updateColors()
    }

    func updateColors() {
        let totalPoints = meshWidth * meshHeight
        let palette = ColorPaletteManager.shared.palettes[selectedPaletteIndex].colors
        let paletteCount = palette.count

        currentColors = (0 ..< totalPoints).map { index in
            let normalizedIndex = Double(index % paletteCount) / Double(paletteCount)
            let adjustedProgress = (normalizedIndex + colorAnimationProgress).truncatingRemainder(dividingBy: 1.0)
            return interpolateColorFromPalette(palette: palette, progress: adjustedProgress)
        }
    }

    func resetMesh() {
        points = (0 ..< meshHeight).map { y in
            (0 ..< meshWidth).map { x in
                SIMD2(Float(x) / Float(meshWidth - 1), Float(y) / Float(meshHeight - 1))
            }
        }
        updateColors()
    }

    func isMovingPoint(x: Int, y: Int) -> Bool {
        movingPointIndex.map { $0 == (x, y) } == true
    }

    func movePoint(to touchPoint: SIMD2<Float>) {
        if movingPointIndex == nil {
            movingPointIndex = findNearestPoint(to: touchPoint)
        }

        guard let (x, y) = movingPointIndex else { return }

        let moveThreshold: Float = 0.01
        let currentPoint = points[y][x]
        let distance = sqrt(pow(touchPoint.x - currentPoint.x, 2) + pow(touchPoint.y - currentPoint.y, 2))

        if distance > moveThreshold {
            let interpolationFactor: Float = 0.5
            points[y][x] = SIMD2<Float>(
                currentPoint.x + (touchPoint.x - currentPoint.x) * interpolationFactor,
                currentPoint.y + (touchPoint.y - currentPoint.y) * interpolationFactor
            )
        }
    }

    func endPointMovement() {
        movingPointIndex = nil
    }

    func findNearestPoint(to touchPoint: SIMD2<Float>) -> (Int, Int) {
        var nearestIndex = (0, 0)
        var nearestDistance = Float.infinity

        for y in 0 ..< meshHeight {
            for x in 0 ..< meshWidth {
                let distance = calculateDistance(points[y][x], touchPoint)
                if distance < nearestDistance {
                    nearestDistance = distance
                    nearestIndex = (x, y)
                }
            }
        }

        return nearestIndex
    }

    func calculateDistance(_ a: SIMD2<Float>, _ b: SIMD2<Float>) -> Float {
        let diff = a - b
        return sqrt(diff.x * diff.x + diff.y * diff.y)
    }

    func updateMeshDimensions() {
        while meshWidth > points[0].count {
            addColumn()
        }
        while meshWidth < points[0].count {
            removeColumn()
        }
        while meshHeight > points.count {
            addRow()
        }
        while meshHeight < points.count {
            removeRow()
        }
        updateColors()
    }

    func circleSize(for x: Int, y: Int) -> CGFloat {
        return (movingPointIndex ?? (-1, -1)) == (x, y) ? 25 : 20
    }

    func getPointColor(x: Int, y: Int) -> Color {
        guard x < meshWidth && y < meshHeight else { return .white }
        let index = y * meshWidth + x
        return currentColors[safe: index] ?? .white
    }

    func changePointColor(x: Int, y: Int, color: Color) {
        guard x < meshWidth && y < meshHeight else { return }
        let index = y * meshWidth + x
        if index < currentColors.count {
            currentColors[index] = color
        }
    }

    func resetPointColor(x: Int, y: Int) {
        guard x < meshWidth && y < meshHeight else { return }
        let index = y * meshWidth + x
        if index < currentColors.count {
            currentColors[index] = .white
        }
    }

    func startColorAnimation() {
        stopColorAnimation()
        colorAnimationTimer = Timer.publish(every: 0.03, on: .main, in: .common)
            .autoconnect()
            .sink { [weak self] _ in
                guard let self = self, self.isColorAnimationEnabled else { return }
                self.updateColorAnimation()
            }
    }

    func stopColorAnimation() {
        colorAnimationTimer?.cancel()
        colorAnimationTimer = nil
    }

    func selectPointForColorPicker(x: Int, y: Int) {
        selectedPointForColorPicker = (x, y)
        showColorPicker = true
    }

    // MARK: Private

    private let maxMeshDimension = 10
    private let minMeshDimension = 2

    private var colorAnimationTimer: AnyCancellable?

    private func addRow() {
        guard points.count < 10 else { return }
        let newRow = (0 ..< meshWidth).map { x in
            SIMD2<Float>(Float(x) / Float(max(1, meshWidth - 1)), 1.0)
        }
        points.append(newRow)
    }

    private func removeRow() {
        guard points.count > 2 else { return }
        points.removeLast()
    }

    private func addColumn() {
        guard points[0].count < 10 else { return }
        for y in 0 ..< points.count {
            let x = Float(points[0].count) / Float(max(1, points[0].count))
            points[y].append(SIMD2<Float>(x, Float(y) / Float(max(1, points.count - 1))))
        }
    }

    private func removeColumn() {
        guard points[0].count > 2 else { return }
        for y in 0 ..< points.count {
            points[y].removeLast()
        }
    }

    private func updateColorAnimation() {
        colorAnimationProgress += 0.001 * colorAnimationSpeed
        if colorAnimationProgress >= 1.0 {
            colorAnimationProgress -= 1.0
        }
        updateColors()
    }

    private func interpolateColorFromPalette(palette: [Color], progress: Double) -> Color {
        let paletteCount = Double(palette.count)
        let index = Int(floor(progress * paletteCount))
        let nextIndex = (index + 1) % palette.count
        let colorProgress = (progress * paletteCount).truncatingRemainder(dividingBy: 1.0)

        return interpolateColor(from: palette[index], to: palette[nextIndex], progress: colorProgress)
    }

    private func interpolateColor(from: Color, to: Color, progress: Double) -> Color {
        let fromComponents = from.components
        let toComponents = to.components

        let r = fromComponents.red + (toComponents.red - fromComponents.red) * progress
        let g = fromComponents.green + (toComponents.green - fromComponents.green) * progress
        let b = fromComponents.blue + (toComponents.blue - fromComponents.blue) * progress

        return Color(red: r, green: g, blue: b)
    }
}

extension Color {
    var components: (red: CGFloat, green: CGFloat, blue: CGFloat, alpha: CGFloat) {
        var r: CGFloat = 0
        var g: CGFloat = 0
        var b: CGFloat = 0
        var a: CGFloat = 0
        UIColor(self).getRed(&r, green: &g, blue: &b, alpha: &a)
        return (r, g, b, a)
    }

    func inverse() -> Color {
        var red: CGFloat = 0
        var green: CGFloat = 0
        var blue: CGFloat = 0
        var alpha: CGFloat = 0

        UIColor(self).getRed(&red, green: &green, blue: &blue, alpha: &alpha)

        return Color(red: 1.0 - red, green: 1.0 - green, blue: 1.0 - blue)
    }
}

extension Array {
    subscript(safe index: Index) -> Element? {
        return indices.contains(index) ? self[index] : nil
    }
}

//  SettingsView.swift

import SwiftUI

struct SettingsView: View {
    @ObservedObject var viewModel: MeshGradientViewModel

    var body: some View {
        NavigationView {
            Form {
                Section(header: Text("Mesh")) {
                    Toggle("Show Points", isOn: $viewModel.showPoints)

                    Stepper(value: $viewModel.meshWidth, in: 2 ... 10, step: 1) {
                        Text("Columns: \(viewModel.meshWidth)")
                    } onEditingChanged: { _ in
                        viewModel.updateMeshDimensions()
                    }

                    Stepper(value: $viewModel.meshHeight, in: 2 ... 10, step: 1) {
                        Text("Rows: \(viewModel.meshHeight)")
                    } onEditingChanged: { _ in
                        viewModel.updateMeshDimensions()
                    }

                    Button("Reset Mesh", role: .destructive) {
                        viewModel.resetMesh()
                    }
                }
                .listRowBackground(Color.white.opacity(0.2))

                Section(header: Text("Color")) {
                    Picker("Color Palette", selection: $viewModel.selectedPaletteIndex) {
                        ForEach(0 ..< ColorPaletteManager.shared.palettes.count, id: \.self) { index in
                            Text(ColorPaletteManager.shared.palettes[index].name)
                        }
                    }

                }.listRowBackground(Color.white.opacity(0.2))

                Section(header: Text("Color Animation")) {
                    Toggle("Enable Color Animation", isOn: $viewModel.isColorAnimationEnabled)
                    HStack {
                        Text("Speed")
                        Slider(value: $viewModel.colorAnimationSpeed, in: 0.1 ... 5, step: 0.1)
                        Text("\(viewModel.colorAnimationSpeed, specifier: "%.1f")")
                    }
                }
                .listRowBackground(Color.white.opacity(0.2))

                Section(header: Text("Shadow")) {
                    Toggle("Enable Shadow", isOn: $viewModel.shadowEnabled)
                    if viewModel.shadowEnabled {
                        ColorPicker("Shadow Color", selection: $viewModel.shadowColor)
                        HStack {
                            Text("Radius")
                            Slider(value: $viewModel.shadowRadius, in: 0 ... 50)
                            Text("\(Int(viewModel.shadowRadius))")
                        }
                        HStack {
                            Text("Offset X")
                            Slider(value: $viewModel.shadowOffsetX, in: -50 ... 50)
                            Text("\(Int(viewModel.shadowOffsetX))")
                        }
                        HStack {
                            Text("Offset Y")
                            Slider(value: $viewModel.shadowOffsetY, in: -50 ... 50)
                            Text("\(Int(viewModel.shadowOffsetY))")
                        }
                    }
                }.listRowBackground(Color.white.opacity(0.2))
            }.padding(.top)
        }
//        .background(.thinMaterial)
        .scrollContentBackground(.hidden)
    }
}

//  ColorPalettes.swift

import SwiftUI

struct ColorPalette: Identifiable {
    let id = UUID()
    let name: String
    let colors: [Color]
}

class ColorPaletteManager {
    static let shared = ColorPaletteManager()
    
    let palettes: [ColorPalette] = [
        ColorPalette(name: "Vibrant", colors: [.red, .blue, .green, .yellow, .purple, .orange, .pink, .cyan]),
        ColorPalette(name: "Pastel", colors: [Color(#colorLiteral(red: 0.9568627477, green: 0.6588235497, blue: 0.5450980663, alpha: 1)), Color(#colorLiteral(red: 0.721568644, green: 0.8862745166, blue: 0.5921568871, alpha: 1)), Color(#colorLiteral(red: 0.4745098054, green: 0.8392156959, blue: 0.9764705896, alpha: 1)), Color(#colorLiteral(red: 0.9098039269, green: 0.4784313738, blue: 0.6431372762, alpha: 1)), Color(#colorLiteral(red: 0.9764705896, green: 0.850980401, blue: 0.5490196347, alpha: 1))]),
        ColorPalette(name: "Monochrome", colors: [.black, .white, Color(white: 0.25), Color(white: 0.5), Color(white: 0.75)]),
        
    ]
    
    func getRandomColors(from palette: ColorPalette, count: Int) -> [Color] {
        return Array(palette.colors.shuffled().prefix(count))
    }
}
