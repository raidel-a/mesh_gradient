//
//  Untitled.swift
//  mesh_gradient
//
//  Created by Raidel Almeida on 8/31/24.
//

import CoreMotion
import SwiftUI

struct ContentView: View {
        //    @StateObject private var motionManager = MotionManager()
    @State private var points: [SIMD2<Float>] = [
        SIMD2(0.0, 0.0), SIMD2(0.5, 0.0), SIMD2(1.0, 0.0),
        SIMD2(0.0, 0.5), SIMD2(0.5, 0.5), SIMD2(1.0, 0.5),
        SIMD2(0.0, 1.0), SIMD2(0.5, 1.0), SIMD2(1.0, 1.0),
    ]
    @State private var showSettings = false
        //    @State private var isGyroEnabled = false
        //    @State private var showGyroDebugInfo = false
    @State private var isHueRotationEnabled = false
    @State private var hueRotationSpeed: Double = 1.0
    @State private var hueRotationAngle: Angle = .zero
    @State private var showPoints = false
    @State private var currentColors: [Color] = []
    @State private var selectedPaletteIndex = 0
    
    let timer = Timer.publish(every: 0.1, on: .main, in: .common).autoconnect()
    
    var body: some View {
        GeometryReader { geometry in
            ZStack {
                MeshGradient(
                    width: 3,
                    height: 3,
                    points: points,
                    colors: currentColors
                )
                .shadow(color: .gray, radius: 25, x: -10, y: 10)
                .hueRotation(hueRotationAngle)
                .gesture(
                    DragGesture(minimumDistance: 0)
                        .onChanged { value in
                            let touchPoint = SIMD2<Float>(
                                Float(value.location.x / geometry.size.width),
                                Float(value.location.y / geometry.size.height)
                            )
                            withAnimation(.smooth()) {
                                moveNearestPoint(to: touchPoint)
                            }
                        }
                )
                
                    //                .gesture(
                    //                    DragGesture(minimumDistance: 0)
                    //                        .onChanged { value in
                    ////                            if !isGyroEnabled {
                    //                                let touchPoint = SIMD2<Float>(
                    //                                    Float(value.location.x * geometry.size.width),
                    //                                    Float(value.location.y * geometry.size.height)
                    //                                )
                    //                                moveNearestPoint(to: touchPoint)
                    ////                            }
                    //                        }
                    //                )
                
                if showPoints {
                    ForEach(0 ..< points.count, id: \.self) { index in
                        Circle()
                            .fill(Color.white)
                            .frame(width: 10, height: 10)
                            .border(Color.black, width: 1)
                            .position(
                                x: CGFloat(points[index].x) * geometry.size.width,
                                y: CGFloat(points[index].y) * geometry.size.height
                            )
                    }
                }
                    //                if showGyroDebugInfo {
                    //                    VStack {
                    //                        Text("X: \(motionManager.x, specifier: "%.2f")")
                    //                        Text("Y: \(motionManager.y, specifier: "%.2f")")
                    //                        Text("Z: \(motionManager.z, specifier: "%.2f")")
                    //                        Text("Center: (\(points[4].x, specifier: "%.2f"), \(points[4].y, specifier: "%.2f"))")
                    //                    }
                    //                    .padding()
                    //                    .background(.ultraThinMaterial)
                    //                    .cornerRadius(10)
                    //                    .position(x: geometry.size.width / 2, y: geometry.size.height - 80)
                    //                }
                
                VStack {
                    Spacer()
                    HStack {
                        Spacer()
                        Button(action: {
                            showSettings.toggle()
                        }) {
                            Image(systemName: "arrow.up")
                                .tint(.black)
                                .font(.title2)
                                .padding(10)
                                .background(
                                    .thinMaterial,
                                    in: RoundedRectangle(
                                        cornerRadius: 10.0
                                    )
                                )
                        }
                        .padding(20)
                    }
                }
            }
        }
        .ignoresSafeArea()
        .sheet(isPresented: $showSettings) {
            SettingsView(
                //                isGyroEnabled: $isGyroEnabled,
                //                showGyroDebugInfo: $showGyroDebugInfo,
                selectedPaletteIndex: $selectedPaletteIndex,
                isHueRotationEnabled: $isHueRotationEnabled,
                hueRotationSpeed: $hueRotationSpeed,
                showPoints: $showPoints
            )
            .presentationDetents([.medium])
        }
        .onReceive(timer) { _ in
            if isHueRotationEnabled {
                withAnimation(.bouncy(duration: 0.2)) {
                    hueRotationAngle += Angle(degrees: hueRotationSpeed)
                }
            }
                //            if isGyroEnabled {
                //                updateCenterPositionWithGyro()
                //            }
        }.onAppear {
            updateColors()
        }
        .onChange(of: selectedPaletteIndex) { _ in
            updateColors()
        }
            //        .onChange(of: isGyroEnabled) { newValue in
            //            if newValue {
            //                motionManager.startGyroUpdates()
            //            } else {
            //                motionManager.stopGyroUpdates()
            //            }
            //        }
    }
    
    private func updateColors() {
        currentColors = ColorPaletteManager.shared.getRandomColors(
            from: ColorPaletteManager.shared.palettes[selectedPaletteIndex],
            count: points.count
        )
    }
    
    private func moveNearestPoint(to touchPoint: SIMD2<Float>) {
        var nearestIndex = 0
        var nearestDistance = Float.infinity
        
        for (index, point) in points.enumerated() {
            let distance = calculateDistance(point, touchPoint)
            if distance < nearestDistance {
                nearestDistance = distance
                nearestIndex = index
            }
        }
        
            // Add a threshold to prevent small, unintended movements
        let moveThreshold: Float = 0.01
        if nearestDistance > moveThreshold {
                // Use interpolation for smoother movement
            let interpolationFactor: Float = 0.5 // Adjust this value for desired smoothness
            points[nearestIndex] = SIMD2<Float>(
                points[nearestIndex].x + (touchPoint.x - points[nearestIndex].x) * interpolationFactor,
                points[nearestIndex].y + (touchPoint.y - points[nearestIndex].y) * interpolationFactor
            )
        }
    }
    
        //    private func updateCenterPositionWithGyro() {
        //        let sensitivity: Float = 0.01
        //        points[4].x += Float(motionManager.y) * sensitivity
        //        points[4].y -= Float(motionManager.x) * sensitivity
        //
        //        points[4].x = max(0, min(points[4].x, 1))
        //        points[4].y = max(0, min(points[4].y, 1))
        //    }
    
    private func calculateDistance(_ a: SIMD2<Float>, _ b: SIMD2<Float>) -> Float {
        let diff = a - b
        return sqrt(diff.x * diff.x + diff.y * diff.y)
    }
}

struct SettingsView: View {
        //    @Binding var isGyroEnabled: Bool
        //    @Binding var showGyroDebugInfo: Bool
    @Binding var selectedPaletteIndex: Int
    @Binding var isHueRotationEnabled: Bool
    @Binding var hueRotationSpeed: Double
    @Binding var showPoints: Bool
    
    var body: some View {
        NavigationView {
            Form {
                Section(header: Text("Color")) {
                    Toggle("Enable Hue Rotation", isOn: $isHueRotationEnabled)
                    if isHueRotationEnabled {
                        VStack {
                            Text("Hue Rotation Speed")
                            Slider(value: $hueRotationSpeed, in: 0.1 ... 5, step: 0.1)
                            Text("\(hueRotationSpeed, specifier: "%.1f") degrees/second")
                        }
                    }
                    Picker("Color Palette", selection: $selectedPaletteIndex) {
                        ForEach(0 ..< ColorPaletteManager.shared.palettes.count, id: \.self) { index in
                            Text(ColorPaletteManager.shared.palettes[index].name)
                        }
                    }
                }
                Section(header: Text("Points")) {
                        //                    Toggle("Enable Gyroscope", isOn: $isGyroEnabled)
                        //                    Toggle("Show Gyro Debug Info", isOn: $showGyroDebugInfo)
                    Toggle("Show Points", isOn: $showPoints)
                }
            }
            .navigationTitle("Settings")
        }
    }
}

    // class MotionManager: ObservableObject {
    //    // MARK: Internal
    //
    //    let gyroOperationQueue = OperationQueue()
    ////    gyroOperationQueue.maxConcurrentOperationCount = 1
    //
    //    @Published var x: Double = 0
    //    @Published var y: Double = 0
    //    @Published var z: Double = 0
    //
    //    func startGyroUpdates() {
    //        if motionManager.isGyroAvailable {
    //            motionManager.gyroUpdateInterval = 0.1
    //            motionManager.startGyroUpdates(to: gyroOperationQueue) { data, _ in
    //                guard let gyroData = data else { return }
    //                DispatchQueue.main.async {
    //                    self.x = data!.rotationRate.x
    //                    self.y = data!.rotationRate.y
    //                    self.z = data!.rotationRate.z
    //                }
    //            }
    //        }
    //    }
    //
    //    func stopGyroUpdates() {
    //        motionManager.stopGyroUpdates()
    //    }
    //
    //    // MARK: Private
    //
    //    private let motionManager = CMMotionManager()
    // }

#Preview {
    ContentView()
}
