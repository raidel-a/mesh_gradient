    // ContentView.swift

import SwiftUI

struct ContentView: View {
        // MARK: Internal
    
    var body: some View {
        GeometryReader { geometry in
            ZStack {
                meshGradientView(in: geometry)
                pointsView(in: geometry)
                settingsButton
            }
        }
        .sheet(isPresented: $viewModel.showSettings) { SettingsView(viewModel: viewModel) }
        .onAppear(perform: viewModel.initializeMesh)
        .onChange(of: viewModel.selectedPaletteIndex) { _ in viewModel.updateColors() }
        .onChange(of: viewModel.meshWidth) { _ in viewModel.updateMeshDimensions() }
        .onChange(of: viewModel.meshHeight) { _ in viewModel.updateMeshDimensions() }
    }
    
        // MARK: Private
    
    @StateObject private var viewModel = MeshGradientViewModel()
    @State private var selectedPointForMenu: (Int, Int)? = nil
    
    private var settingsButton: some View {
        VStack {
            Spacer()
            HStack {
                Spacer()
                Button(action: { viewModel.showSettings.toggle() }) {
                    Image(systemName: "arrow.up")
                        .tint(.gray)
                        .font(.title2)
                        .padding(10)
                        .background(.ultraThinMaterial, in: RoundedRectangle(cornerRadius: 47))
                        .shadow(radius: 1)
                }
                .padding(.horizontal)
            }
        }
    }
    
    private func meshGradientView(in geometry: GeometryProxy) -> some View {
        MeshGradient(
            width: viewModel.meshWidth,
            height: viewModel.meshHeight,
            points: viewModel.points.flatMap { $0 },
            colors: viewModel.currentColors
        )
        .shadow(
            color: viewModel.shadowEnabled ? viewModel.shadowColor : .clear,
            radius: viewModel.shadowRadius,
            x: viewModel.shadowOffset.width,
            y: viewModel.shadowOffset.height
        )
        .modifier(HueRotationModifier(isEnabled: viewModel.isHueRotationEnabled, angle: viewModel.hueRotationAngle))
            //        .hueRotation(viewModel.hueRotationAngle)
        .gesture(dragGesture(in: geometry))
    }
    
    private func pointsView(in geometry: GeometryProxy) -> some View {
        Group {
            if viewModel.showPoints {
                ForEach(0..<viewModel.meshHeight, id: \.self) { y in
                    ForEach(0..<viewModel.meshWidth, id: \.self) { x in
                        if let _ = viewModel.points[safe: y]?[safe: x] {
                            pointCircle(x: x, y: y, in: geometry)
                        }
                    }
                }
            }
        }
    }
    
    private func pointCircle(x: Int, y: Int, in geometry: GeometryProxy) -> some View {
        Circle()
            .fill(viewModel.movingPointIndex.map { $0 == (x, y) } == true ? Color.black : viewModel.getPointColor(x:x,y:y))
            .frame(width: viewModel.circleSize(for: x, y: y), height: viewModel.circleSize(for: x, y: y))
            .shadow(color: .accentColor, radius: 2)
            .position(
                x: CGFloat(viewModel.points[safe: y]?[safe: x]?.x ?? 0) * geometry.size.width,
                y: CGFloat(viewModel.points[safe: y]?[safe: x]?.y ?? 0) * geometry.size.height
            )
            .onTapGesture(count: 2) {
                viewModel.selectedPointForMenu = (x:x, y:y)
                viewModel.showColorPicker = true
            }
            .sheet(isPresented: $viewModel.showColorPicker) {
                VStack {
                    ColorPicker("Change Color", selection: Binding(
                        get: { viewModel.getPointColor(x: x, y: y) },
                        set: { newColor in
                            viewModel.changePointColor(x: x, y: y, color: newColor)
                        }
                    ))
                    .padding()
                    
                    Button("Reset Color") {
                        viewModel.resetPointColor(x: x, y: y)
                        viewModel.showColorPicker = false
                    }
                    .padding()
                    
                    Button("Close") {
                        viewModel.showColorPicker = false
                    }
                    .padding()
                }
                .presentationDetents([.height(175)])
                .presentationDragIndicator(.visible)
                .presentationBackground(.thinMaterial)
            }
    }
    
    private func dragGesture(in geometry: GeometryProxy) -> some Gesture {
        DragGesture(minimumDistance: 5)
            .onChanged { value in
                let touchPoint = SIMD2(
                    Float(value.location.x / geometry.size.width),
                    Float(value.location.y / geometry.size.height)
                )
                withAnimation(.smooth()) {
                    viewModel.movePoint(to: touchPoint)
                }
            }
            .onEnded { _ in viewModel.movingPointIndex = nil }
    }
}

#Preview {
    ContentView()
}

    //  MeshGradientViewModel.swift

import SwiftUI

class MeshGradientViewModel: ObservableObject {
    @Published var meshWidth: Int = 3
    @Published var meshHeight: Int = 3
    @Published var points: [[SIMD2<Float>]] = []
    @Published var showPoints = true
    @Published var currentColors: [Color] = []
    @Published var selectedPaletteIndex = 0
    @Published var isHueRotationEnabled = false
    @Published var hueRotationSpeed: Double = 1.0
    @Published var hueRotationAngle: Angle = .zero
    @Published var shadowEnabled = true
    @Published var shadowColor = Color.gray
    @Published var shadowRadius: CGFloat = 25
    @Published var shadowOffsetX: CGFloat = -10
    @Published var shadowOffsetY: CGFloat = 10
    @Published var showSettings = false
    @Published var movingPointIndex: (Int, Int)? = nil
    @Published var selectedPointForMenu: (Int, Int)? = nil
    @Published var selectedColor: Color = .white
    @Published var shadowOffset = CGSize(width: -10, height: 10)
    @Published var showColorPicker = false
    
    private let maxMeshDimension = 10
    private let minMeshDimension = 2
    private var hueRotationTimer: Timer?
    
    init() {
        setupHueRotationTimer()
    }
    private func setupHueRotationTimer() {
        hueRotationTimer = Timer.scheduledTimer(withTimeInterval: 0.1, repeats: true) { [weak self] _ in
            guard let self = self, self.isHueRotationEnabled else { return }
            DispatchQueue.main.async {
                self.hueRotationAngle += Angle(degrees: self.hueRotationSpeed)
            }
        }
    }
    
    deinit {
        hueRotationTimer?.invalidate()
    }
    
    func initializeMesh() {
        points = (0..<meshHeight).map { y in
            (0..<meshWidth).map { x in
                SIMD2<Float>(Float(x) / Float(max(1, meshWidth - 1)), Float(y) / Float(max(1, meshHeight - 1)))
            }
        }
        updateColors()
    }
    
    func updateColors() {
        let totalPoints = meshWidth * meshHeight
        let palette = ColorPaletteManager.shared.palettes[selectedPaletteIndex].colors
        
        currentColors = (0..<totalPoints).map { index in
            palette[index % palette.count]
        }
    }
    
    func resetMesh() {
        points = (0..<meshHeight).map { y in
            (0..<meshWidth).map { x in
                SIMD2(Float(x) / Float(meshWidth - 1), Float(y) / Float(meshHeight - 1))
            }
        }
        updateColors()
    }
    
    func movePoint(to touchPoint: SIMD2<Float>) {
        if movingPointIndex == nil {
            movingPointIndex = findNearestPoint(to: touchPoint)
        }
        
        guard let (x, y) = movingPointIndex else { return }
        
        let moveThreshold: Float = 0.01
        let distance = calculateDistance(points[y][x], touchPoint)
        
        if distance > moveThreshold {
            let interpolationFactor: Float = 0.5
            points[y][x] = SIMD2(
                points[y][x].x + (touchPoint.x - points[y][x].x) * interpolationFactor,
                points[y][x].y + (touchPoint.y - points[y][x].y) * interpolationFactor
            )
        }
    }
    
    func findNearestPoint(to touchPoint: SIMD2<Float>) -> (Int, Int) {
        var nearestIndex = (0, 0)
        var nearestDistance = Float.infinity
        
        for y in 0..<meshHeight {
            for x in 0..<meshWidth {
                let distance = calculateDistance(points[y][x], touchPoint)
                if distance < nearestDistance {
                    nearestDistance = distance
                    nearestIndex = (x, y)
                }
            }
        }
        
        return nearestIndex
    }
    
    func calculateDistance(_ a: SIMD2<Float>, _ b: SIMD2<Float>) -> Float {
        let diff = a - b
        return sqrt(diff.x * diff.x + diff.y * diff.y)
    }
    
    func updateMeshDimensions() {
        while meshWidth > points[0].count { addColumn() }
        while meshWidth < points[0].count { removeColumn() }
        while meshHeight > points.count { addRow() }
        while meshHeight < points.count { removeRow() }
        updateColors()
    }
    
    private func addRow() {
        guard points.count < 10 else { return }
        let newRow = (0..<meshWidth).map { x in
            SIMD2<Float>(Float(x) / Float(max(1, meshWidth - 1)), 1.0)
        }
        points.append(newRow)
    }
    
    private func removeRow() {
        guard points.count > 2 else { return }
        points.removeLast()
    }
    
    private func addColumn() {
        guard points[0].count < 10 else { return }
        for y in 0..<points.count {
            let x = Float(points[0].count) / Float(max(1, points[0].count))
            points[y].append(SIMD2<Float>(x, Float(y) / Float(max(1, points.count - 1))))
        }
    }
    
    private func removeColumn() {
        guard points[0].count > 2 else { return }
        for y in 0..<points.count {
            points[y].removeLast()
        }
    }
    
    func circleSize(for x: Int, y: Int) -> CGFloat {
        return (movingPointIndex ?? (-1, -1)) == (x, y) ? 25 : 20
    }
    
    func getPointColor(x: Int, y: Int) -> Color {
        guard x < meshWidth && y < meshHeight else { return .white }
        let index = y * meshWidth + x
        return currentColors[safe: index] ?? .white
    }
    
    func changePointColor(x: Int, y: Int, color: Color) {
        guard x < meshWidth && y < meshHeight else { return }
        let index = y * meshWidth + x
        if index < currentColors.count {
            currentColors[index] = color
        }
    }
    
    func resetPointColor(x: Int, y: Int) {
        guard x < meshWidth && y < meshHeight else { return }
        let index = y * meshWidth + x
        if index < currentColors.count {
            currentColors[index] = .white
        }
    }
}

extension Array {
    subscript(safe index: Index) -> Element? {
        return indices.contains(index) ? self[index] : nil
    }
}

    //  SettingsView.swift

import SwiftUI

struct SettingsView: View {
    @ObservedObject var viewModel: MeshGradientViewModel
    
    var body: some View {
        NavigationView {
            Form {
                Section(header: Text("Mesh")) {
                    Toggle("Show Points", isOn: $viewModel.showPoints)
                    
                    Stepper(value: $viewModel.meshWidth, in: 2...10, step: 1) {
                        Text("Columns: \(viewModel.meshWidth)")
                    } onEditingChanged: { _ in
                        viewModel.updateMeshDimensions()
                    }
                    
                    Stepper(value: $viewModel.meshHeight, in: 2...10, step: 1) {
                        Text("Rows: \(viewModel.meshHeight)")
                    } onEditingChanged: { _ in
                        viewModel.updateMeshDimensions()
                    }
                    
                    Button("Reset Mesh", role: .destructive) {
                        viewModel.resetMesh()
                    }
                }
                .listRowBackground(Color.white.opacity(0.2))
                
                Section(header: Text("Color")) {
                    Picker("Color Palette", selection: $viewModel.selectedPaletteIndex) {
                        ForEach(0..<ColorPaletteManager.shared.palettes.count, id: \.self) { index in
                            Text(ColorPaletteManager.shared.palettes[index].name)
                        }
                    }
                    Toggle("Enable Hue Rotation", isOn: $viewModel.isHueRotationEnabled)
                    if viewModel.isHueRotationEnabled {
                        VStack {
                            Slider(value: $viewModel.hueRotationSpeed, in: 0.1...5, step: 0.1)
                            Text("\(viewModel.hueRotationSpeed, specifier: "%.1f") degrees/second")
                        }
                    }
                }.listRowBackground(Color.white.opacity(0.2))
                
                Section(header: Text("Shadow")) {
                    Toggle("Enable Shadow", isOn: $viewModel.shadowEnabled)
                    if viewModel.shadowEnabled {
                        ColorPicker("Shadow Color", selection: $viewModel.shadowColor)
                        HStack {
                            Text("Radius")
                            Slider(value: $viewModel.shadowRadius, in: 0...50)
                            Text("\(Int(viewModel.shadowRadius))")
                        }
                        HStack {
                            Text("Offset X")
                            Slider(value: $viewModel.shadowOffsetX, in: -50...50)
                            Text("\(Int(viewModel.shadowOffsetX))")
                        }
                        HStack {
                            Text("Offset Y")
                            Slider(value: $viewModel.shadowOffsetY, in: -50...50)
                            Text("\(Int(viewModel.shadowOffsetY))")
                        }
                    }
                }.listRowBackground(Color.white.opacity(0.2))
            }.padding(.top)
        }
        .background(.thinMaterial)
        .scrollContentBackground(.hidden)
    }
}
struct HueRotationModifier: ViewModifier {
    let isEnabled: Bool
    let angle: Angle
    
    func body(content: Content) -> some View {
        if isEnabled {
            content.hueRotation(angle)
        } else {
            content
        }
    }
}

