// ContentView.swift

import SwiftUI

struct ContentView: View {
    // MARK: Internal

    // MARK: - Body

    var body: some View {
        GeometryReader { geometry in
            ZStack {
                meshGradientView(in: geometry)
                pointsView(in: geometry)
                settingsButton
                if let selectedPoint = selectedPointForMenu {
                    PointColorMenu(
                        currentColors: $currentColors,
                        pointIndex: selectedPoint,
                        meshWidth: meshWidth,
                        showMenu: Binding(
                            get: { selectedPointForMenu != nil },
                            set: { if !$0 { selectedPointForMenu = nil } }
                        )
                    )
                }
            }
        }
        .sheet(isPresented: $showSettings) { settingsView }
        .onAppear {
            initializeMesh()
            updateMeshDimensions()
        }
        .onChange(of: selectedPaletteIndex) { _ in updateColors() }
        .onChange(of: meshWidth) { _ in updateMeshDimensions() }
        .onChange(of: meshHeight) { _ in updateMeshDimensions() }
    }

    // MARK: Private

    // MARK: - Properties

    // Mesh properties
    @State private var meshWidth = 3
    @State private var meshHeight = 3
    @State private var points: [[SIMD2<Float>]] = []
    @State private var showPoints = true
    @State private var movingPointIndex: (Int, Int)?

    // Color properties
    @State private var currentColors: [Color] = []
    @State private var selectedPaletteIndex = 0
    @State private var isHueRotationEnabled = false
    @State private var hueRotationSpeed = 1.0
    @State private var hueRotationAngle: Angle = .zero
    @State private var selectedPointForMenu: (Int, Int)? = nil
    @State private var selectedColor: Color = .white

    // Shadow properties
    @State private var shadowEnabled = true
    @State private var shadowColor = Color.gray
    @State private var shadowRadius: CGFloat = 25
    @State private var shadowOffset = CGSize(width: -10, height: 10)

    // UI state
    @State private var showSettings = false

    // MARK: - Constants

    private let timer = Timer.publish(every: 0.1, on: .main, in: .common).autoconnect()
    private let maxMeshDimension = 10
    private let minMeshDimension = 2

    private var settingsButton: some View {
        VStack {
            Spacer()
            HStack {
                Spacer()
                Button(action: { showSettings.toggle() }) {
                    Image(systemName: "arrow.up")
                        .tint(.gray)
                        .font(.title2)
                        .padding(10)
                        .background(
                            .ultraThinMaterial,
                            in: RoundedRectangle(cornerRadius: 47)
                        )
                        .shadow(radius: 1)
                }
                .padding(.horizontal)
            }
        }
    }

    private var settingsView: some View {
        SettingsView(
            selectedPaletteIndex: $selectedPaletteIndex,
            isHueRotationEnabled: $isHueRotationEnabled,
            hueRotationSpeed: $hueRotationSpeed,
            showPoints: $showPoints,
            meshWidth: $meshWidth,
            meshHeight: $meshHeight,
            resetMesh: resetMesh,
            updateMeshDimensions: updateMeshDimensions,
            shadowEnabled: $shadowEnabled,
            shadowColor: $shadowColor,
            shadowRadius: $shadowRadius,
            shadowOffsetX: $shadowOffset.width,
            shadowOffsetY: $shadowOffset.height
        )
        .presentationDetents([.medium, .large])
        .presentationDragIndicator(.visible)
        .presentationCornerRadius(47)
        .presentationBackground(.clear)
    }

    // MARK: - Views

    private func meshGradientView(in geometry: GeometryProxy) -> some View {
        MeshGradient(
            width: meshWidth,
            height: meshHeight,
            points: points.flatMap { $0 },
            colors: currentColors
        )
        .shadow(
            color: shadowEnabled ? shadowColor : .clear,
            radius: shadowRadius,
            x: shadowOffset.width,
            y: shadowOffset.height
        )
        .hueRotation(hueRotationAngle)
        .gesture(dragGesture(in: geometry))
    }

    private func pointsView(in geometry: GeometryProxy) -> some View {
        Group {
            if showPoints {
                ForEach(0 ..< min(meshHeight, points.count), id: \.self) { y in
                    ForEach(0 ..< min(meshWidth, points[y].count), id: \.self) { x in
                        pointCircle(x: x, y: y, in: geometry)
                    }
                }
            }
        }
    }

    private func pointCircle(x: Int, y: Int, in geometry: GeometryProxy) -> some View {
        Circle()
            .fill(movingPointIndex.map { $0 == (x, y) } == true ? Color.red : Color.white)
            .frame(
                width: circleSize(for: x, y: y),
                height: circleSize(for: x, y: y)
            )
            .border(Color.black, width: 3)
            .position(
                x: CGFloat(points[safe: y]?[safe: x]?.x ?? 0) * geometry.size.width,
                y: CGFloat(points[safe: y]?[safe: x]?.y ?? 0) * geometry.size.height
            )
            .gesture(
                TapGesture(count: 2)
                    .onEnded {
                        selectedPointForMenu = (x: x, y: y)
                        let impact = UIImpactFeedbackGenerator(style: .medium)
                        impact.impactOccurred()
                    }
            )
            .contextMenu {
                if let selectedPoint = selectedPointForMenu, selectedPoint == (x, y) {
                    ColorPicker("Change Color", selection: $selectedColor)
                        .onChange(of: selectedColor) { _ in
                            changePointColor(x: x, y: y)
                        }
                    Button("Reset Color") {
                        resetPointColor(x: x, y: y)
                    }
                }
            }
    }

    private func circleSize(for x: Int, y: Int) -> CGFloat {
        return (movingPointIndex ?? (-1, -1)) == (x, y) ? 25 : 20
    }

    private func changePointColor(x: Int, y: Int) {
        let colorIndex = y * meshWidth + x
        currentColors[colorIndex] = selectedColor
        selectedPointForMenu = nil
    }

    private func resetPointColor(x: Int, y: Int) {
        let colorIndex = y * meshWidth + x
        currentColors[colorIndex] = .white // or any default color
        selectedPointForMenu = nil
    }

    // MARK: - Gestures

    private func dragGesture(in geometry: GeometryProxy) -> some Gesture {
        DragGesture(minimumDistance: 10)
            .onChanged { value in
                let touchPoint = SIMD2(
                    Float(value.location.x / geometry.size.width),
                    Float(value.location.y / geometry.size.height)
                )
                withAnimation(.smooth()) {
                    movePoint(to: touchPoint)
                }
            }
            .onEnded { _ in
                movingPointIndex = nil
            }
    }

    // MARK: - Methods

    private func initializeMesh() {
        if points.isEmpty {
            resetMesh()
        }
        updateColors()
    }

    private func updateColors() {
        let totalPoints = points.count * points[0].count
        currentColors = ColorPaletteManager.shared.getRandomColors(
            from: ColorPaletteManager.shared.palettes[selectedPaletteIndex],
            count: totalPoints
        )
    }

    private func resetMesh() {
        points = (0 ..< meshHeight).map { y in
            (0 ..< meshWidth).map { x in
                SIMD2(Float(x) / Float(meshWidth - 1), Float(y) / Float(meshHeight - 1))
            }
        }
        updateColors()
    }

    private func movePoint(to touchPoint: SIMD2<Float>) {
        if movingPointIndex == nil {
            movingPointIndex = findNearestPoint(to: touchPoint)
        }

        guard let (x, y) = movingPointIndex else { return }

        let moveThreshold: Float = 0.01
        let distance = calculateDistance(points[y][x], touchPoint)

        if distance > moveThreshold {
            let interpolationFactor: Float = 0.5
            points[y][x] = SIMD2(
                points[y][x].x + (touchPoint.x - points[y][x].x) * interpolationFactor,
                points[y][x].y + (touchPoint.y - points[y][x].y) * interpolationFactor
            )
        }
    }

    private func findNearestPoint(to touchPoint: SIMD2<Float>) -> (Int, Int) {
        var nearestIndex = (0, 0)
        var nearestDistance = Float.infinity

        for y in 0 ..< meshHeight {
            for x in 0 ..< meshWidth {
                let distance = calculateDistance(points[y][x], touchPoint)
                if distance < nearestDistance {
                    nearestDistance = distance
                    nearestIndex = (x, y)
                }
            }
        }

        return nearestIndex
    }

    private func calculateDistance(_ a: SIMD2<Float>, _ b: SIMD2<Float>) -> Float {
        let diff = a - b
        return sqrt(diff.x * diff.x + diff.y * diff.y)
    }

    private func addRow() {
        guard points.count < 10 else { return }
        let newRow = (0 ..< points[0].count).map { x in
            SIMD2<Float>(Float(x) / Float(points[0].count - 1), 1.0)
        }
        points.append(newRow)
    }

    private func removeRow() {
        guard points.count > 2 else { return }
        points.removeLast()
    }

    private func addColumn() {
        guard points[0].count < 10 else { return }
        for y in 0 ..< points.count {
            let x = Float(points[0].count) / Float(points[0].count - 1)
            points[y].append(SIMD2<Float>(x, Float(y) / Float(points.count - 1)))
        }
    }

    private func removeColumn() {
        guard meshWidth > 2 else { return }
        for y in 0 ..< meshHeight {
            points[y].removeLast()
        }
        meshWidth -= 1
        updateColors()
    }

    private func updateMeshDimensions() {
        // Update width
        while meshWidth > points[0].count {
            addColumn()
        }
        while meshWidth < points[0].count {
            removeColumn()
        }

        // Update height
        while meshHeight > points.count {
            addRow()
        }
        while meshHeight < points.count {
            removeRow()
        }

        updateColors()
    }
}

struct PointColorMenu: View {
    // MARK: Internal

    @Binding var currentColors: [Color]
    let pointIndex: (Int, Int)
    let meshWidth: Int
    @Binding var showMenu: Bool

    var body: some View {
        VStack {
            ColorPicker("Select Color", selection: $selectedColor)
                .padding()

            Button("Apply Color") {
                let colorIndex = pointIndex.1 * meshWidth + pointIndex.0
                currentColors[colorIndex] = selectedColor
                showMenu = false
            }

            Button("Remove Color") {
                let colorIndex = pointIndex.1 * meshWidth + pointIndex.0
                currentColors[colorIndex] = .clear
                showMenu = false
            }

            Button("Cancel", role: .cancel) {
                showMenu = false
            }
        }
        .padding()
        .background(Color.white)
        .cornerRadius(10)
        .shadow(radius: 5)
    }

    // MARK: Private

    @State private var selectedColor: Color = .white // Default color
}



}

extension Array {
    subscript(safe index: Index) -> Element? {
        return indices.contains(index) ? self[index] : nil
    }
}

    //extension Color {
    //    static func random() -> Color {
    //        return Color(
    //            red: Double.random(in: 0 ... 1),
    //            green: Double.random(in: 0 ... 1),
    //            blue: Double.random(in: 0 ... 1)
    //        )
    //    }
    //}

#Preview {
    ContentView()
}


//  ColorPalettes.swift

import SwiftUI

struct ColorPalette: Identifiable {
    let id = UUID()
    let name: String
    let colors: [Color]
}

class ColorPaletteManager {
    static let shared = ColorPaletteManager()
    
    let palettes: [ColorPalette] = [
        ColorPalette(name: "Vibrant", colors: [.red, .blue, .green, .yellow, .purple, .orange, .pink, .cyan]),
        ColorPalette(name: "Pastel", colors: [Color(#colorLiteral(red: 0.9568627477, green: 0.6588235497, blue: 0.5450980663, alpha: 1)), Color(#colorLiteral(red: 0.721568644, green: 0.8862745166, blue: 0.5921568871, alpha: 1)), Color(#colorLiteral(red: 0.4745098054, green: 0.8392156959, blue: 0.9764705896, alpha: 1)), Color(#colorLiteral(red: 0.9098039269, green: 0.4784313738, blue: 0.6431372762, alpha: 1)), Color(#colorLiteral(red: 0.9764705896, green: 0.850980401, blue: 0.5490196347, alpha: 1))]),
        ColorPalette(name: "Monochrome", colors: [.black, .white, Color(white: 0.25), Color(white: 0.5), Color(white: 0.75)]),
        
    ]
    
    func getRandomColors(from palette: ColorPalette, count: Int) -> [Color] {
        return Array(palette.colors.shuffled().prefix(count))
    }
}
